
@{
    Layout = "~/Views/Shared/_BasicLayout.cshtml";
    ViewBag.Title = "Controls";

    ViewBag.needBootStrap = true;
}

<style>
    .redbg {
        background-color: red;
    }

    .greenbg {
        background-color: green;
    }
    .yellowbg {
        background-color: yellow;
    }
    .bordered {
        border: solid 1px black;
    }
</style>

<h2>Controls</h2>
<div id="controlsContainer"></div>
<hr /><hr />
<div id="controlsContainer2"></div>
<script>

    var container = document.getElementById("controlsContainer")
    var builder = new ControlBuilder();

    /*
    builder.htmlControl({ html: '<hr/>' }).appendTo(container);
    builder.htmlControl({ html: '<div>aaa <span><strong>span element</strong></span></div>' }).appendTo(container);

    builder.staticControl({ content: '<strong>static content</strong>' }).appendTo(container);
    builder.staticControl({ text: '<i>static text</i>' }).appendTo(container);
    builder.staticControl({ value: '<b>static value</b>' }).appendTo(container);
    
    builder.textBox({ name: "FirstName",value : 'Tejasvi Hegde', required: true, abc: "xyz", class: 'form-control', validation: { abc: "xyz", message: "a message", maxlength: 10 } }).appendTo(container);
    builder.hidden({ validation: { abc: "xyz", message: "a message" } }).appendTo(container);
    builder.password({ validation: { abc: "xyz", message: "a message" } }).appendTo(container);
    builder.checkBox({checked : ""}).appendTo(container);
    builder.radio({}).appendTo(container);
    builder.select({class: 'form-control', Options: [{ 'value': 'a', 'text': 'abcd' }], EmptyOption: { value: 2, text: 'Select 2' } }).appendTo(container);
    builder.textArea({class: 'form-control'}).appendTo(container);

   
    var idText = new cTextControl({ value: 'idText' });//builder.textBox({ value: 'idText' });

    var row1 = {
        options: {
            columnWidths : [1,3,4,"10px"] //too
        },
                columns: [
                    {
                        controls: [
                            builder.checkBox(),
                            idText, //can use instance variable
                            "A text",
                            100,
                            true
                        ]
                    },
                    {
                        //if its direct control, can also specify single control
                        controls: builder.select()
                    },
                    {
                        controls: [
                            builder.radio(),
                            builder.textBox(),
                            idText //reusing same control instance variable will move the control from earlier position to here!!! only one instance variables are possible
                        ]
                    }
                ]
            }

    var controlDef =
    {
        options: {
            columnWidths : [2,2,2,"100px"]
        },
        rows: [row1,
            {
                columns: [
                    {
                        //single control can be added
                        control: builder.textArea()

                    },
                    {
                        //both can be added. but first control is added then controls
                        control: builder.textArea(),
                        controls: [
                            builder.select()
                        ]
                    },
                    {
                        controls: [
                            builder.radio(),
                            builder.textBox()
                        ]
                    }
                ]
            },
            {
                //shortcut.. creates column for each control and adds control in that column
                columns: [
                    builder.checkBox(),
                    builder.select(),
                    builder.radio(),
                    builder.textBox()
                ]
            },
        ]
    }*/
   // var layout = new cLayout(controlDef).Build();
   // layout.appendTo(container);

</script>
<script>
    //form builder
var _schema = {
        Gid: { type: 'hidden', config: { directControl: true } },
        CustomerId: {
            required: true,
            options: {},
            config:  { w: 5, isNewRow: true },
            onchange:" CustomerChange(this);",
        },

       
        OrderNo: { config: { isNewRow: true, w: 3 } },
        OrderDate: { config: { lo: 1, lw: 2, w: 2 } },
     
       
        PrimaryContactPerson: { config: { isNewRow: true, w: 5 } },
     
      
        

       
        ItemsTotalAmountLbl: { type: 'static', title: 'Items Total Amount', class: 'text-number text-bold', config: { lo: 8, lw: 2, w: 2, isNewRow: true }, value: '{{masterData.ItemsTotalAmount | toCurrency}}' },

        DiscountPerc: {
            dataType: 'decimal', config: { isNewRow: true, lo: 5, lw: 2, w: 1, showHelpText: false }, props: {
                'v-model': "masterData.DiscountPerc"
            }
        },
        DiscountAmountLbl: { type: 'static', class: 'text-number text-bold', label: { title: 'Discount Rs.' }, config: { lw: 2, w: 2 }, value: '{{masterData.DiscountAmount | toCurrency}}' },
        TaxableAmountLbl: { type: 'static', title: 'Taxable Amount', class: 'text-number text-bold', config: { lo: 8, lw: 2, w: 2, isNewRow: true }, value: '{{masterData.TaxableAmount | toCurrency}}' },
        CGSTPerc: { dataType: 'decimal', config: { isNewRow: true, lo: 5, lw: 2, w: 1, showHelpText: false }, props: { 'v-model': "masterData.CGSTPerc" } },
        CGSTAmountLbl: { type: 'static',  class: 'text-number text-bold',  config: { lw: 2, w: 2 ,title: 'CGST Rs.'}, value: '{{masterData.CGSTAmount | toCurrency}}' },

        SGSTPerc: { dataType: 'decimal', config: { isNewRow: true, lo: 5, lw: 2, w: 1, showHelpText: false }, props: { 'v-model': "masterData.SGSTPerc" } },
        SGSTAmountLbl: { type: 'static', class: 'text-number text-bold', config: { lw: 2, w: 2 ,title: 'SGST Rs.'}, value: '{{masterData.SGSTAmount | toCurrency}}' },

        IGSTPerc: { dataType: 'decimal', config: { isNewRow: true, lo: 5, lw: 2, w: 1, showHelpText: false }, props: { 'v-model': "masterData.IGSTPerc" } },
        IGSTAmountLbl: { type: 'static', class: 'text-number text-bold', config: { lw: 2, w: 2,title: 'IGST Rs.' }, value: '{{masterData.IGSTAmount | toCurrency}}' },


        TotalAmountLbl: { type: 'static', title: 'Total Amount', class: 'text-number text-bold', config: { isNewRow: true, lo: 8, lw: 2, w: 2 }, value: '{{masterData.TotalAmount | toCurrency}}' },
        RoundedOffLbl: { type: 'static', title: 'Rounded Off', class: 'text-number text-bold', config: { isNewRow: true, lo: 8, lw: 2, w: 2 }, value: '{{masterData.RoundedOff | toCurrency}}' },
        GrandTotalAmountLbl: { type: 'static', title: 'Grand Total Amount', class: 'text-number text-bold', config: { isNewRow: true, lo: 8, lw: 2, w: 2 }, value: '{{masterData.GrandTotalAmount | toCurrency}}' },

        
        ItemsTotalAmount: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.ItemsTotalAmount" } },
        DiscountAmount: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.DiscountAmount" } },
        TaxableAmount: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.TaxableAmount" } },
        CGSTAmount: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.CGSTAmount" } },
        SGSTAmount: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.SGSTAmount" } },
        IGSTAmount: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.IGSTAmount" } },
        TotalAmount: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.TotalAmount" } },
        RoundedOff: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.RoundedOff" } },
        GrandTotalAmount: { type: 'hidden', config: { directControl: true }, props: { ':value': "masterData.GrandTotalAmount" } },
    theHR: { type: 'html', noLabel: true, config: { lw: 0, o: 0, w: 12, isNewRow: true, noLabel: true }, content: '<hr/>' },
    theHR2: { type: 'html', noLabel: true, config: { lw: 0, o: 0, w: 12, isNewRow: true, noLabel: true }, content: '<hr color="red"/><hr color="green"/>' },
     Divs: { type: 'html', noLabel: true, config: { lw: 0, o: 0, w: 12, isNewRow: true, noLabel: true }, content: '<div style="background-color:red;width:100px;height:100px;">aaa<div style="background-color:blue;width:50px;height:50px;">bbb</div></div><div style="background-color:green;width:100px;height:100px;">ccc</div>' },
    
        Notes: { type: 'textarea', rows: 3, config: { lw: 1, w: 11, isNewRow: true } },
        IsCancelled: { type: 'checkbox', config: { o: 0, lo: 0, lw: 1, w: 1, isNewRow: true } },
        __footNote: { type: 'static', offset: { md: 3 }, class: 'category form-category', text: '<small>*</small> Required fields', config: { isNewRow: true,  w: 7 , noLabel : true} }
    };
    var _values = {};
    if (_values.CGSTPerc === undefined) {
        _values.CGSTPerc = 9;
    }
    if (_values.SGSTPerc === undefined) {
        _values.SGSTPerc = 9;
    }
   
    var formDef = {
        schema: _schema,
        values: _values,
        layout: { type: 'bootstrap-fluid'},
        options: { }
    }
    //var fb = new FormBuilder(formDef);
    //fb.WriteControls(['Gid', 'CustomerId', 'SalesPersonId',"GodownId", 'OrderNo', 'OrderDate', 'PhoneNumber', 'Name', 'PhoneNumber', 'PINCode', 'Email','PrimaryContactPerson','__footNote']);


    var fbuilder = new cFormBuilder(formDef);
    
    //fbuilder.WriteControlsTo('controlsContainer2');
    fbuilder.WriteFormLayoutTo('controlsContainer2');
</script>

@section scripts
{

}